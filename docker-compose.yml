version: "3"
services:
  nginx:
    build:
      context: ./nginx
      dockerfile: ./Dockerfile
    image: nginx
    restart: always
    ports:
      - "80:80"
    depends_on:
      - django
    links:
      - django
    entrypoint:
      - /docker-entrypoint.sh
    volumes:
      - ./log:/var/log/nginx
      - ./webapp/staticfiles:/static
      - ./webapp/mediafiles:/media

  django:
    build:
      context: ./webapp
      dockerfile: ./Dockerfile
    image: django
    restart: always
    command: >
      bash -c "python ./manage.py makemigrations --noinput &&
               python ./manage.py migrate --noinput &&
               python ./manage.py collectstatic --noinput &&
               python ./manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./webapp:/srv
      - ./log:/var/log/
      - ./webapp/staticfiles:/static
      - ./webapp/mediafiles:/media
    depends_on:
      - mysql

  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3308:3308"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: Asia/Seoul
      MYSQL_TCP_PORT: 3308
    expose:
      - "3308"
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - mysql_data:/var/lib/mysql

volumes:
  mysql_data:
  staticfiles:
  mediafiles:
  # host에서 저장하지 않고 volumes 컨테이너를 통해 데이터를 관리한다.
